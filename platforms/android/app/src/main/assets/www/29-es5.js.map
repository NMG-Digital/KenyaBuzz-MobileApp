{"version":3,"sources":["node_modules/@ionic/core/dist/esm/ion-route_4.entry.js"],"names":[],"mappings":"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","sourcesContent":["import { r as registerInstance, e as createEvent, i as getElement, h, H as Host } from './index-7a8b7a1c.js';\r\nimport { c as componentOnReady, n as debounce } from './helpers-dd7e4b7b.js';\r\nimport { b as getIonMode } from './ionic-global-63a97a32.js';\r\nimport { o as openURL, c as createColorClasses } from './theme-ff3fc52f.js';\r\n\r\nconst Route = class {\r\n  constructor(hostRef) {\r\n    registerInstance(this, hostRef);\r\n    this.ionRouteDataChanged = createEvent(this, \"ionRouteDataChanged\", 7);\r\n    /**\r\n     * Relative path that needs to match in order for this route to apply.\r\n     *\r\n     * Accepts paths similar to expressjs so that you can define parameters\r\n     * in the url /foo/:bar where bar would be available in incoming props.\r\n     */\r\n    this.url = '';\r\n  }\r\n  onUpdate(newValue) {\r\n    this.ionRouteDataChanged.emit(newValue);\r\n  }\r\n  onComponentProps(newValue, oldValue) {\r\n    if (newValue === oldValue) {\r\n      return;\r\n    }\r\n    const keys1 = newValue ? Object.keys(newValue) : [];\r\n    const keys2 = oldValue ? Object.keys(oldValue) : [];\r\n    if (keys1.length !== keys2.length) {\r\n      this.onUpdate(newValue);\r\n      return;\r\n    }\r\n    for (const key of keys1) {\r\n      if (newValue[key] !== oldValue[key]) {\r\n        this.onUpdate(newValue);\r\n        return;\r\n      }\r\n    }\r\n  }\r\n  connectedCallback() {\r\n    this.ionRouteDataChanged.emit();\r\n  }\r\n  static get watchers() { return {\r\n    \"url\": [\"onUpdate\"],\r\n    \"component\": [\"onUpdate\"],\r\n    \"componentProps\": [\"onComponentProps\"]\r\n  }; }\r\n};\r\n\r\nconst RouteRedirect = class {\r\n  constructor(hostRef) {\r\n    registerInstance(this, hostRef);\r\n    this.ionRouteRedirectChanged = createEvent(this, \"ionRouteRedirectChanged\", 7);\r\n  }\r\n  propDidChange() {\r\n    this.ionRouteRedirectChanged.emit();\r\n  }\r\n  connectedCallback() {\r\n    this.ionRouteRedirectChanged.emit();\r\n  }\r\n  static get watchers() { return {\r\n    \"from\": [\"propDidChange\"],\r\n    \"to\": [\"propDidChange\"]\r\n  }; }\r\n};\r\n\r\nconst ROUTER_INTENT_NONE = 'root';\r\nconst ROUTER_INTENT_FORWARD = 'forward';\r\nconst ROUTER_INTENT_BACK = 'back';\r\n\r\nconst generatePath = (segments) => {\r\n  const path = segments\r\n    .filter(s => s.length > 0)\r\n    .join('/');\r\n  return '/' + path;\r\n};\r\nconst chainToPath = (chain) => {\r\n  const path = [];\r\n  for (const route of chain) {\r\n    for (const segment of route.path) {\r\n      if (segment[0] === ':') {\r\n        const param = route.params && route.params[segment.slice(1)];\r\n        if (!param) {\r\n          return null;\r\n        }\r\n        path.push(param);\r\n      }\r\n      else if (segment !== '') {\r\n        path.push(segment);\r\n      }\r\n    }\r\n  }\r\n  return path;\r\n};\r\nconst writePath = (history, root, useHash, path, direction, state, queryString) => {\r\n  let url = generatePath([\r\n    ...parsePath(root),\r\n    ...path\r\n  ]);\r\n  if (useHash) {\r\n    url = '#' + url;\r\n  }\r\n  if (queryString !== undefined) {\r\n    url = url + '?' + queryString;\r\n  }\r\n  if (direction === ROUTER_INTENT_FORWARD) {\r\n    history.pushState(state, '', url);\r\n  }\r\n  else {\r\n    history.replaceState(state, '', url);\r\n  }\r\n};\r\nconst removePrefix = (prefix, path) => {\r\n  if (prefix.length > path.length) {\r\n    return null;\r\n  }\r\n  if (prefix.length <= 1 && prefix[0] === '') {\r\n    return path;\r\n  }\r\n  for (let i = 0; i < prefix.length; i++) {\r\n    if (prefix[i].length > 0 && prefix[i] !== path[i]) {\r\n      return null;\r\n    }\r\n  }\r\n  if (path.length === prefix.length) {\r\n    return [''];\r\n  }\r\n  return path.slice(prefix.length);\r\n};\r\nconst readPath = (loc, root, useHash) => {\r\n  let pathname = loc.pathname;\r\n  if (useHash) {\r\n    const hash = loc.hash;\r\n    pathname = (hash[0] === '#')\r\n      ? hash.slice(1)\r\n      : '';\r\n  }\r\n  const prefix = parsePath(root);\r\n  const path = parsePath(pathname);\r\n  return removePrefix(prefix, path);\r\n};\r\nconst parsePath = (path) => {\r\n  if (path == null) {\r\n    return [''];\r\n  }\r\n  const removeQueryString = path.split('?')[0];\r\n  const segments = removeQueryString.split('/')\r\n    .map(s => s.trim())\r\n    .filter(s => s.length > 0);\r\n  if (segments.length === 0) {\r\n    return [''];\r\n  }\r\n  else {\r\n    return segments;\r\n  }\r\n};\r\n\r\nconst printRoutes = (routes) => {\r\n  console.group(`[ion-core] ROUTES[${routes.length}]`);\r\n  for (const chain of routes) {\r\n    const path = [];\r\n    chain.forEach(r => path.push(...r.path));\r\n    const ids = chain.map(r => r.id);\r\n    console.debug(`%c ${generatePath(path)}`, 'font-weight: bold; padding-left: 20px', '=>\\t', `(${ids.join(', ')})`);\r\n  }\r\n  console.groupEnd();\r\n};\r\nconst printRedirects = (redirects) => {\r\n  console.group(`[ion-core] REDIRECTS[${redirects.length}]`);\r\n  for (const redirect of redirects) {\r\n    if (redirect.to) {\r\n      console.debug('FROM: ', `$c ${generatePath(redirect.from)}`, 'font-weight: bold', ' TO: ', `$c ${generatePath(redirect.to)}`, 'font-weight: bold');\r\n    }\r\n  }\r\n  console.groupEnd();\r\n};\r\n\r\nconst writeNavState = async (root, chain, direction, index, changed = false, animation) => {\r\n  try {\r\n    // find next navigation outlet in the DOM\r\n    const outlet = searchNavNode(root);\r\n    // make sure we can continue interacting the DOM, otherwise abort\r\n    if (index >= chain.length || !outlet) {\r\n      return changed;\r\n    }\r\n    await new Promise(resolve => componentOnReady(outlet, resolve));\r\n    const route = chain[index];\r\n    const result = await outlet.setRouteId(route.id, route.params, direction, animation);\r\n    // if the outlet changed the page, reset navigation to neutral (no direction)\r\n    // this means nested outlets will not animate\r\n    if (result.changed) {\r\n      direction = ROUTER_INTENT_NONE;\r\n      changed = true;\r\n    }\r\n    // recursively set nested outlets\r\n    changed = await writeNavState(result.element, chain, direction, index + 1, changed, animation);\r\n    // once all nested outlets are visible let's make the parent visible too,\r\n    // using markVisible prevents flickering\r\n    if (result.markVisible) {\r\n      await result.markVisible();\r\n    }\r\n    return changed;\r\n  }\r\n  catch (e) {\r\n    console.error(e);\r\n    return false;\r\n  }\r\n};\r\nconst readNavState = async (root) => {\r\n  const ids = [];\r\n  let outlet;\r\n  let node = root;\r\n  // tslint:disable-next-line:no-constant-condition\r\n  while (true) {\r\n    outlet = searchNavNode(node);\r\n    if (outlet) {\r\n      const id = await outlet.getRouteId();\r\n      if (id) {\r\n        node = id.element;\r\n        id.element = undefined;\r\n        ids.push(id);\r\n      }\r\n      else {\r\n        break;\r\n      }\r\n    }\r\n    else {\r\n      break;\r\n    }\r\n  }\r\n  return { ids, outlet };\r\n};\r\nconst waitUntilNavNode = () => {\r\n  if (searchNavNode(document.body)) {\r\n    return Promise.resolve();\r\n  }\r\n  return new Promise(resolve => {\r\n    window.addEventListener('ionNavWillLoad', resolve, { once: true });\r\n  });\r\n};\r\nconst QUERY = ':not([no-router]) ion-nav, :not([no-router]) ion-tabs, :not([no-router]) ion-router-outlet';\r\nconst searchNavNode = (root) => {\r\n  if (!root) {\r\n    return undefined;\r\n  }\r\n  if (root.matches(QUERY)) {\r\n    return root;\r\n  }\r\n  const outlet = root.querySelector(QUERY);\r\n  return outlet ? outlet : undefined;\r\n};\r\n\r\nconst matchesRedirect = (input, route) => {\r\n  const { from, to } = route;\r\n  if (to === undefined) {\r\n    return false;\r\n  }\r\n  if (from.length > input.length) {\r\n    return false;\r\n  }\r\n  for (let i = 0; i < from.length; i++) {\r\n    const expected = from[i];\r\n    if (expected === '*') {\r\n      return true;\r\n    }\r\n    if (expected !== input[i]) {\r\n      return false;\r\n    }\r\n  }\r\n  return from.length === input.length;\r\n};\r\nconst routeRedirect = (path, routes) => {\r\n  return routes.find(route => matchesRedirect(path, route));\r\n};\r\nconst matchesIDs = (ids, chain) => {\r\n  const len = Math.min(ids.length, chain.length);\r\n  let i = 0;\r\n  for (; i < len; i++) {\r\n    if (ids[i].toLowerCase() !== chain[i].id) {\r\n      break;\r\n    }\r\n  }\r\n  return i;\r\n};\r\nconst matchesPath = (inputPath, chain) => {\r\n  const segments = new RouterSegments(inputPath);\r\n  let matchesDefault = false;\r\n  let allparams;\r\n  for (let i = 0; i < chain.length; i++) {\r\n    const path = chain[i].path;\r\n    if (path[0] === '') {\r\n      matchesDefault = true;\r\n    }\r\n    else {\r\n      for (const segment of path) {\r\n        const data = segments.next();\r\n        // data param\r\n        if (segment[0] === ':') {\r\n          if (data === '') {\r\n            return null;\r\n          }\r\n          allparams = allparams || [];\r\n          const params = allparams[i] || (allparams[i] = {});\r\n          params[segment.slice(1)] = data;\r\n        }\r\n        else if (data !== segment) {\r\n          return null;\r\n        }\r\n      }\r\n      matchesDefault = false;\r\n    }\r\n  }\r\n  const matches = (matchesDefault)\r\n    ? matchesDefault === (segments.next() === '')\r\n    : true;\r\n  if (!matches) {\r\n    return null;\r\n  }\r\n  if (allparams) {\r\n    return chain.map((route, i) => ({\r\n      id: route.id,\r\n      path: route.path,\r\n      params: mergeParams(route.params, allparams[i]),\r\n      beforeEnter: route.beforeEnter,\r\n      beforeLeave: route.beforeLeave\r\n    }));\r\n  }\r\n  return chain;\r\n};\r\n// Merges the route parameter objects.\r\n// Returns undefined when both parameters are undefined.\r\nconst mergeParams = (a, b) => {\r\n  return a || b ? Object.assign(Object.assign({}, a), b) : undefined;\r\n};\r\nconst routerIDsToChain = (ids, chains) => {\r\n  let match = null;\r\n  let maxMatches = 0;\r\n  const plainIDs = ids.map(i => i.id);\r\n  for (const chain of chains) {\r\n    const score = matchesIDs(plainIDs, chain);\r\n    if (score > maxMatches) {\r\n      match = chain;\r\n      maxMatches = score;\r\n    }\r\n  }\r\n  if (match) {\r\n    return match.map((route, i) => ({\r\n      id: route.id,\r\n      path: route.path,\r\n      params: mergeParams(route.params, ids[i] && ids[i].params)\r\n    }));\r\n  }\r\n  return null;\r\n};\r\nconst routerPathToChain = (path, chains) => {\r\n  let match = null;\r\n  let matches = 0;\r\n  for (const chain of chains) {\r\n    const matchedChain = matchesPath(path, chain);\r\n    if (matchedChain !== null) {\r\n      const score = computePriority(matchedChain);\r\n      if (score > matches) {\r\n        matches = score;\r\n        match = matchedChain;\r\n      }\r\n    }\r\n  }\r\n  return match;\r\n};\r\nconst computePriority = (chain) => {\r\n  let score = 1;\r\n  let level = 1;\r\n  for (const route of chain) {\r\n    for (const path of route.path) {\r\n      if (path[0] === ':') {\r\n        score += Math.pow(1, level);\r\n      }\r\n      else if (path !== '') {\r\n        score += Math.pow(2, level);\r\n      }\r\n      level++;\r\n    }\r\n  }\r\n  return score;\r\n};\r\nclass RouterSegments {\r\n  constructor(path) {\r\n    this.path = path.slice();\r\n  }\r\n  next() {\r\n    if (this.path.length > 0) {\r\n      return this.path.shift();\r\n    }\r\n    return '';\r\n  }\r\n}\r\n\r\nconst readRedirects = (root) => {\r\n  return Array.from(root.children)\r\n    .filter(el => el.tagName === 'ION-ROUTE-REDIRECT')\r\n    .map(el => {\r\n    const to = readProp(el, 'to');\r\n    return {\r\n      from: parsePath(readProp(el, 'from')),\r\n      to: to == null ? undefined : parsePath(to),\r\n    };\r\n  });\r\n};\r\nconst readRoutes = (root) => {\r\n  return flattenRouterTree(readRouteNodes(root));\r\n};\r\nconst readRouteNodes = (root, node = root) => {\r\n  return Array.from(node.children)\r\n    .filter(el => el.tagName === 'ION-ROUTE' && el.component)\r\n    .map(el => {\r\n    const component = readProp(el, 'component');\r\n    if (component == null) {\r\n      throw new Error('component missing in ion-route');\r\n    }\r\n    return {\r\n      path: parsePath(readProp(el, 'url')),\r\n      id: component.toLowerCase(),\r\n      params: el.componentProps,\r\n      beforeLeave: el.beforeLeave,\r\n      beforeEnter: el.beforeEnter,\r\n      children: readRouteNodes(root, el)\r\n    };\r\n  });\r\n};\r\nconst readProp = (el, prop) => {\r\n  if (prop in el) {\r\n    return el[prop];\r\n  }\r\n  if (el.hasAttribute(prop)) {\r\n    return el.getAttribute(prop);\r\n  }\r\n  return null;\r\n};\r\nconst flattenRouterTree = (nodes) => {\r\n  const routes = [];\r\n  for (const node of nodes) {\r\n    flattenNode([], routes, node);\r\n  }\r\n  return routes;\r\n};\r\nconst flattenNode = (chain, routes, node) => {\r\n  const s = chain.slice();\r\n  s.push({\r\n    id: node.id,\r\n    path: node.path,\r\n    params: node.params,\r\n    beforeLeave: node.beforeLeave,\r\n    beforeEnter: node.beforeEnter\r\n  });\r\n  if (node.children.length === 0) {\r\n    routes.push(s);\r\n    return;\r\n  }\r\n  for (const sub of node.children) {\r\n    flattenNode(s, routes, sub);\r\n  }\r\n};\r\n\r\nconst Router = class {\r\n  constructor(hostRef) {\r\n    registerInstance(this, hostRef);\r\n    this.ionRouteWillChange = createEvent(this, \"ionRouteWillChange\", 7);\r\n    this.ionRouteDidChange = createEvent(this, \"ionRouteDidChange\", 7);\r\n    this.previousPath = null;\r\n    this.busy = false;\r\n    this.state = 0;\r\n    this.lastState = 0;\r\n    /**\r\n     * By default `ion-router` will match the routes at the root path (\"/\").\r\n     * That can be changed when\r\n     *\r\n     */\r\n    this.root = '/';\r\n    /**\r\n     * The router can work in two \"modes\":\r\n     * - With hash: `/index.html#/path/to/page`\r\n     * - Without hash: `/path/to/page`\r\n     *\r\n     * Using one or another might depend in the requirements of your app and/or where it's deployed.\r\n     *\r\n     * Usually \"hash-less\" navigation works better for SEO and it's more user friendly too, but it might\r\n     * requires additional server-side configuration in order to properly work.\r\n     *\r\n     * On the otherside hash-navigation is much easier to deploy, it even works over the file protocol.\r\n     *\r\n     * By default, this property is `true`, change to `false` to allow hash-less URLs.\r\n     */\r\n    this.useHash = true;\r\n  }\r\n  async componentWillLoad() {\r\n    console.debug('[ion-router] router will load');\r\n    await waitUntilNavNode();\r\n    console.debug('[ion-router] found nav');\r\n    await this.onRoutesChanged();\r\n  }\r\n  componentDidLoad() {\r\n    window.addEventListener('ionRouteRedirectChanged', debounce(this.onRedirectChanged.bind(this), 10));\r\n    window.addEventListener('ionRouteDataChanged', debounce(this.onRoutesChanged.bind(this), 100));\r\n  }\r\n  async onPopState() {\r\n    const direction = this.historyDirection();\r\n    let path = this.getPath();\r\n    const canProceed = await this.runGuards(path);\r\n    if (canProceed !== true) {\r\n      if (typeof canProceed === 'object') {\r\n        path = parsePath(canProceed.redirect);\r\n      }\r\n      return false;\r\n    }\r\n    console.debug('[ion-router] URL changed -> update nav', path, direction);\r\n    return this.writeNavStateRoot(path, direction);\r\n  }\r\n  onBackButton(ev) {\r\n    ev.detail.register(0, processNextHandler => {\r\n      this.back();\r\n      processNextHandler();\r\n    });\r\n  }\r\n  /** @internal */\r\n  async canTransition() {\r\n    const canProceed = await this.runGuards();\r\n    if (canProceed !== true) {\r\n      if (typeof canProceed === 'object') {\r\n        return canProceed.redirect;\r\n      }\r\n      else {\r\n        return false;\r\n      }\r\n    }\r\n    return true;\r\n  }\r\n  /**\r\n   * Navigate to the specified URL.\r\n   *\r\n   * @param url The url to navigate to.\r\n   * @param direction The direction of the animation. Defaults to `\"forward\"`.\r\n   */\r\n  async push(url, direction = 'forward', animation) {\r\n    if (url.startsWith('.')) {\r\n      url = (new URL(url, window.location.href)).pathname;\r\n    }\r\n    console.debug('[ion-router] URL pushed -> updating nav', url, direction);\r\n    let path = parsePath(url);\r\n    let queryString = url.split('?')[1];\r\n    const canProceed = await this.runGuards(path);\r\n    if (canProceed !== true) {\r\n      if (typeof canProceed === 'object') {\r\n        path = parsePath(canProceed.redirect);\r\n        queryString = canProceed.redirect.split('?')[1];\r\n      }\r\n      else {\r\n        return false;\r\n      }\r\n    }\r\n    this.setPath(path, direction, queryString);\r\n    return this.writeNavStateRoot(path, direction, animation);\r\n  }\r\n  /**\r\n   * Go back to previous page in the window.history.\r\n   */\r\n  back() {\r\n    window.history.back();\r\n    return Promise.resolve(this.waitPromise);\r\n  }\r\n  /** @internal */\r\n  async printDebug() {\r\n    console.debug('CURRENT PATH', this.getPath());\r\n    console.debug('PREVIOUS PATH', this.previousPath);\r\n    printRoutes(readRoutes(this.el));\r\n    printRedirects(readRedirects(this.el));\r\n  }\r\n  /** @internal */\r\n  async navChanged(direction) {\r\n    if (this.busy) {\r\n      console.warn('[ion-router] router is busy, navChanged was cancelled');\r\n      return false;\r\n    }\r\n    const { ids, outlet } = await readNavState(window.document.body);\r\n    const routes = readRoutes(this.el);\r\n    const chain = routerIDsToChain(ids, routes);\r\n    if (!chain) {\r\n      console.warn('[ion-router] no matching URL for ', ids.map(i => i.id));\r\n      return false;\r\n    }\r\n    const path = chainToPath(chain);\r\n    if (!path) {\r\n      console.warn('[ion-router] router could not match path because some required param is missing');\r\n      return false;\r\n    }\r\n    console.debug('[ion-router] nav changed -> update URL', ids, path);\r\n    this.setPath(path, direction);\r\n    await this.safeWriteNavState(outlet, chain, ROUTER_INTENT_NONE, path, null, ids.length);\r\n    return true;\r\n  }\r\n  onRedirectChanged() {\r\n    const path = this.getPath();\r\n    if (path && routeRedirect(path, readRedirects(this.el))) {\r\n      this.writeNavStateRoot(path, ROUTER_INTENT_NONE);\r\n    }\r\n  }\r\n  onRoutesChanged() {\r\n    return this.writeNavStateRoot(this.getPath(), ROUTER_INTENT_NONE);\r\n  }\r\n  historyDirection() {\r\n    const win = window;\r\n    if (win.history.state === null) {\r\n      this.state++;\r\n      win.history.replaceState(this.state, win.document.title, win.document.location && win.document.location.href);\r\n    }\r\n    const state = win.history.state;\r\n    const lastState = this.lastState;\r\n    this.lastState = state;\r\n    if (state > lastState || (state >= lastState && lastState > 0)) {\r\n      return ROUTER_INTENT_FORWARD;\r\n    }\r\n    else if (state < lastState) {\r\n      return ROUTER_INTENT_BACK;\r\n    }\r\n    else {\r\n      return ROUTER_INTENT_NONE;\r\n    }\r\n  }\r\n  async writeNavStateRoot(path, direction, animation) {\r\n    if (!path) {\r\n      console.error('[ion-router] URL is not part of the routing set');\r\n      return false;\r\n    }\r\n    // lookup redirect rule\r\n    const redirects = readRedirects(this.el);\r\n    const redirect = routeRedirect(path, redirects);\r\n    let redirectFrom = null;\r\n    if (redirect) {\r\n      this.setPath(redirect.to, direction);\r\n      redirectFrom = redirect.from;\r\n      path = redirect.to;\r\n    }\r\n    // lookup route chain\r\n    const routes = readRoutes(this.el);\r\n    const chain = routerPathToChain(path, routes);\r\n    if (!chain) {\r\n      console.error('[ion-router] the path does not match any route');\r\n      return false;\r\n    }\r\n    // write DOM give\r\n    return this.safeWriteNavState(document.body, chain, direction, path, redirectFrom, 0, animation);\r\n  }\r\n  async safeWriteNavState(node, chain, direction, path, redirectFrom, index = 0, animation) {\r\n    const unlock = await this.lock();\r\n    let changed = false;\r\n    try {\r\n      changed = await this.writeNavState(node, chain, direction, path, redirectFrom, index, animation);\r\n    }\r\n    catch (e) {\r\n      console.error(e);\r\n    }\r\n    unlock();\r\n    return changed;\r\n  }\r\n  async lock() {\r\n    const p = this.waitPromise;\r\n    let resolve;\r\n    this.waitPromise = new Promise(r => resolve = r);\r\n    if (p !== undefined) {\r\n      await p;\r\n    }\r\n    return resolve;\r\n  }\r\n  async runGuards(to = this.getPath(), from = parsePath(this.previousPath)) {\r\n    if (!to || !from) {\r\n      return true;\r\n    }\r\n    const routes = readRoutes(this.el);\r\n    const toChain = routerPathToChain(to, routes);\r\n    const fromChain = routerPathToChain(from, routes);\r\n    const beforeEnterHook = toChain && toChain[toChain.length - 1].beforeEnter;\r\n    const beforeLeaveHook = fromChain && fromChain[fromChain.length - 1].beforeLeave;\r\n    const canLeave = beforeLeaveHook ? await beforeLeaveHook() : true;\r\n    if (canLeave === false || typeof canLeave === 'object') {\r\n      return canLeave;\r\n    }\r\n    const canEnter = beforeEnterHook ? await beforeEnterHook() : true;\r\n    if (canEnter === false || typeof canEnter === 'object') {\r\n      return canEnter;\r\n    }\r\n    return true;\r\n  }\r\n  async writeNavState(node, chain, direction, path, redirectFrom, index = 0, animation) {\r\n    if (this.busy) {\r\n      console.warn('[ion-router] router is busy, transition was cancelled');\r\n      return false;\r\n    }\r\n    this.busy = true;\r\n    // generate route event and emit will change\r\n    const routeEvent = this.routeChangeEvent(path, redirectFrom);\r\n    if (routeEvent) {\r\n      this.ionRouteWillChange.emit(routeEvent);\r\n    }\r\n    const changed = await writeNavState(node, chain, direction, index, false, animation);\r\n    this.busy = false;\r\n    if (changed) {\r\n      console.debug('[ion-router] route changed', path);\r\n    }\r\n    // emit did change\r\n    if (routeEvent) {\r\n      this.ionRouteDidChange.emit(routeEvent);\r\n    }\r\n    return changed;\r\n  }\r\n  setPath(path, direction, queryString) {\r\n    this.state++;\r\n    writePath(window.history, this.root, this.useHash, path, direction, this.state, queryString);\r\n  }\r\n  getPath() {\r\n    return readPath(window.location, this.root, this.useHash);\r\n  }\r\n  routeChangeEvent(path, redirectFromPath) {\r\n    const from = this.previousPath;\r\n    const to = generatePath(path);\r\n    this.previousPath = to;\r\n    if (to === from) {\r\n      return null;\r\n    }\r\n    const redirectedFrom = redirectFromPath ? generatePath(redirectFromPath) : null;\r\n    return {\r\n      from,\r\n      redirectedFrom,\r\n      to,\r\n    };\r\n  }\r\n  get el() { return getElement(this); }\r\n};\r\n\r\nconst routerLinkCss = \":host{--background:transparent;--color:var(--ion-color-primary, #3880ff);background:var(--background);color:var(--color)}:host(.ion-color){color:var(--ion-color-base)}a{font-family:inherit;font-size:inherit;font-style:inherit;font-weight:inherit;letter-spacing:inherit;text-decoration:inherit;text-indent:inherit;text-overflow:inherit;text-transform:inherit;text-align:inherit;white-space:inherit;color:inherit}\";\r\n\r\nconst RouterLink = class {\r\n  constructor(hostRef) {\r\n    registerInstance(this, hostRef);\r\n    /**\r\n     * When using a router, it specifies the transition direction when navigating to\r\n     * another page using `href`.\r\n     */\r\n    this.routerDirection = 'forward';\r\n    this.onClick = (ev) => {\r\n      openURL(this.href, ev, this.routerDirection, this.routerAnimation);\r\n    };\r\n  }\r\n  render() {\r\n    const mode = getIonMode(this);\r\n    const attrs = {\r\n      href: this.href,\r\n      rel: this.rel,\r\n      target: this.target\r\n    };\r\n    return (h(Host, { onClick: this.onClick, class: createColorClasses(this.color, {\r\n        [mode]: true,\r\n        'ion-activatable': true\r\n      }) }, h(\"a\", Object.assign({}, attrs), h(\"slot\", null))));\r\n  }\r\n};\r\nRouterLink.style = routerLinkCss;\r\n\r\nexport { Route as ion_route, RouteRedirect as ion_route_redirect, Router as ion_router, RouterLink as ion_router_link };\r\n"],"sourceRoot":"webpack:///","file":"29-es5.js"}